// Code generated by ogen, DO NOT EDIT.

package generated

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// AdminV1APIImagesNumberGetParams is parameters of GET /admin/v1/api/images/{number} operation.
type AdminV1APIImagesNumberGetParams struct {
	// Page number.
	Number int64
}

func unpackAdminV1APIImagesNumberGetParams(packed middleware.Parameters) (params AdminV1APIImagesNumberGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "number",
			In:   "path",
		}
		params.Number = packed[key].(int64)
	}
	return params
}

func decodeAdminV1APIImagesNumberGetParams(args [1]string, argsEscaped bool, r *http.Request) (params AdminV1APIImagesNumberGetParams, _ error) {
	// Decode path: number.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.Number = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AdminV1APIPostPostIdDeleteParams is parameters of DELETE /admin/v1/api/post/{postId} operation.
type AdminV1APIPostPostIdDeleteParams struct {
	// ID of post to return.
	PostId int64
}

func unpackAdminV1APIPostPostIdDeleteParams(packed middleware.Parameters) (params AdminV1APIPostPostIdDeleteParams) {
	{
		key := middleware.ParameterKey{
			Name: "postId",
			In:   "path",
		}
		params.PostId = packed[key].(int64)
	}
	return params
}

func decodeAdminV1APIPostPostIdDeleteParams(args [1]string, argsEscaped bool, r *http.Request) (params AdminV1APIPostPostIdDeleteParams, _ error) {
	// Decode path: postId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "postId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.PostId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "postId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AdminV1APIPostPostIdGetParams is parameters of GET /admin/v1/api/post/{postId} operation.
type AdminV1APIPostPostIdGetParams struct {
	// ID of post to return.
	PostId int64
}

func unpackAdminV1APIPostPostIdGetParams(packed middleware.Parameters) (params AdminV1APIPostPostIdGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "postId",
			In:   "path",
		}
		params.PostId = packed[key].(int64)
	}
	return params
}

func decodeAdminV1APIPostPostIdGetParams(args [1]string, argsEscaped bool, r *http.Request) (params AdminV1APIPostPostIdGetParams, _ error) {
	// Decode path: postId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "postId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.PostId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "postId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AdminV1APIPostsNumberGetParams is parameters of GET /admin/v1/api/posts/{number} operation.
type AdminV1APIPostsNumberGetParams struct {
	// Page number.
	Number int64
}

func unpackAdminV1APIPostsNumberGetParams(packed middleware.Parameters) (params AdminV1APIPostsNumberGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "number",
			In:   "path",
		}
		params.Number = packed[key].(int64)
	}
	return params
}

func decodeAdminV1APIPostsNumberGetParams(args [1]string, argsEscaped bool, r *http.Request) (params AdminV1APIPostsNumberGetParams, _ error) {
	// Decode path: number.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "number",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.Number = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "number",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// AdminV1APIUserIDGetParams is parameters of GET /admin/v1/api/user/{id} operation.
type AdminV1APIUserIDGetParams struct {
	// ID of user to return.
	ID int64
}

func unpackAdminV1APIUserIDGetParams(packed middleware.Parameters) (params AdminV1APIUserIDGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "id",
			In:   "path",
		}
		params.ID = packed[key].(int64)
	}
	return params
}

func decodeAdminV1APIUserIDGetParams(args [1]string, argsEscaped bool, r *http.Request) (params AdminV1APIUserIDGetParams, _ error) {
	// Decode path: id.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "id",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToInt64(val)
				if err != nil {
					return err
				}

				params.ID = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.Int{
					MinSet:        true,
					Min:           1,
					MaxSet:        false,
					Max:           0,
					MinExclusive:  false,
					MaxExclusive:  false,
					MultipleOfSet: false,
					MultipleOf:    0,
				}).Validate(int64(params.ID)); err != nil {
					return errors.Wrap(err, "int")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "id",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
