// Code generated by ogen, DO NOT EDIT.

package generated

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// AdminV1APIAuthLoginPost implements POST /admin/v1/api/auth/login operation.
	//
	// POST /admin/v1/api/auth/login
	AdminV1APIAuthLoginPost(ctx context.Context, req *ParamsAuthLogin) (AdminV1APIAuthLoginPostRes, error)
	// AdminV1APIAuthLogoutPost implements POST /admin/v1/api/auth/logout operation.
	//
	// POST /admin/v1/api/auth/logout
	AdminV1APIAuthLogoutPost(ctx context.Context) (AdminV1APIAuthLogoutPostRes, error)
	// AdminV1APIAuthRegistrationPost implements POST /admin/v1/api/auth/registration operation.
	//
	// POST /admin/v1/api/auth/registration
	AdminV1APIAuthRegistrationPost(ctx context.Context, req *ParamsAuthRegistration) (AdminV1APIAuthRegistrationPostRes, error)
	// AdminV1APIBlogGet implements GET /admin/v1/api/blog operation.
	//
	// GET /admin/v1/api/blog
	AdminV1APIBlogGet(ctx context.Context) (AdminV1APIBlogGetRes, error)
	// AdminV1APIBlogPatch implements PATCH /admin/v1/api/blog operation.
	//
	// PATCH /admin/v1/api/blog
	AdminV1APIBlogPatch(ctx context.Context, req *Blog) (AdminV1APIBlogPatchRes, error)
	// AdminV1APIImageDelete implements DELETE /admin/v1/api/image operation.
	//
	// DELETE /admin/v1/api/image
	AdminV1APIImageDelete(ctx context.Context, req *AdminV1APIImageDeleteReq) (AdminV1APIImageDeleteRes, error)
	// AdminV1APIImagesNumberGet implements GET /admin/v1/api/images/{number} operation.
	//
	// GET /admin/v1/api/images/{number}
	AdminV1APIImagesNumberGet(ctx context.Context, params AdminV1APIImagesNumberGetParams) (AdminV1APIImagesNumberGetRes, error)
	// AdminV1APIPostPatch implements PATCH /admin/v1/api/post operation.
	//
	// PATCH /admin/v1/api/post
	AdminV1APIPostPatch(ctx context.Context, req *Post) (AdminV1APIPostPatchRes, error)
	// AdminV1APIPostPost implements POST /admin/v1/api/post operation.
	//
	// POST /admin/v1/api/post
	AdminV1APIPostPost(ctx context.Context, req *Post) (AdminV1APIPostPostRes, error)
	// AdminV1APIPostPostIdDelete implements DELETE /admin/v1/api/post/{postId} operation.
	//
	// DELETE /admin/v1/api/post/{postId}
	AdminV1APIPostPostIdDelete(ctx context.Context, params AdminV1APIPostPostIdDeleteParams) (AdminV1APIPostPostIdDeleteRes, error)
	// AdminV1APIPostPostIdGet implements GET /admin/v1/api/post/{postId} operation.
	//
	// GET /admin/v1/api/post/{postId}
	AdminV1APIPostPostIdGet(ctx context.Context, params AdminV1APIPostPostIdGetParams) (AdminV1APIPostPostIdGetRes, error)
	// AdminV1APIPostsNumberGet implements GET /admin/v1/api/posts/{number} operation.
	//
	// GET /admin/v1/api/posts/{number}
	AdminV1APIPostsNumberGet(ctx context.Context, params AdminV1APIPostsNumberGetParams) (AdminV1APIPostsNumberGetRes, error)
	// AdminV1APIUploadPost implements POST /admin/v1/api/upload operation.
	//
	// POST /admin/v1/api/upload
	AdminV1APIUploadPost(ctx context.Context, req OptAdminV1APIUploadPostReq) (AdminV1APIUploadPostRes, error)
	// AdminV1APIUserGet implements GET /admin/v1/api/user operation.
	//
	// GET /admin/v1/api/user
	AdminV1APIUserGet(ctx context.Context) (AdminV1APIUserGetRes, error)
	// AdminV1APIUserIDGet implements GET /admin/v1/api/user/{id} operation.
	//
	// GET /admin/v1/api/user/{id}
	AdminV1APIUserIDGet(ctx context.Context, params AdminV1APIUserIDGetParams) (AdminV1APIUserIDGetRes, error)
	// AdminV1APIUserPatch implements PATCH /admin/v1/api/user operation.
	//
	// PATCH /admin/v1/api/user
	AdminV1APIUserPatch(ctx context.Context, req *User) (AdminV1APIUserPatchRes, error)
	// AdminV1APIUseridGet implements GET /admin/v1/api/userid operation.
	//
	// GET /admin/v1/api/userid
	AdminV1APIUseridGet(ctx context.Context) (AdminV1APIUseridGetRes, error)
	// NewError creates *ErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
